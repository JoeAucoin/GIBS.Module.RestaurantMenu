@using Oqtane.Modules.Controls
@using GIBS.Module.RestaurantMenu.Services
@using GIBS.Module.RestaurantMenu.Models

@namespace GIBS.Module.RestaurantMenu
@inherits ModuleBase
@inject IRestaurantMenuService RestaurantMenuService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

<form @ref="form" class="@(validated ? " was-validated" : "needs-validation")" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="name" HelpText="Enter a name" ResourceKey="Name">Name: </Label>
            <div class="col-sm-9">
                <input id="name" class="form-control" @bind="@_name" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="description" HelpText="Enter a Description" ResourceKey="Description">Description: </Label>
            <div class="col-sm-9">
                <input id="description" class="form-control" @bind="@_description" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="imageURL" HelpText="Enter an Image URL" ResourceKey="ImageURL">Image URL: </Label>
            <div class="col-sm-9">
                <input id="imageURL" class="form-control" @bind="@_imageURL" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="hoursServed" HelpText="Enter the Hours Served" ResourceKey="HoursServed">Hours Served: </Label>
            <div class="col-sm-9">
                <input id="hoursServed" class="form-control" @bind="@_hoursServed" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="sortOrder" HelpText="Enter the Sort Order" ResourceKey="SortOrder">Sort Order: </Label>
            <div class="col-sm-9">
                <input id="sortOrder" class="form-control" @bind="@_sortOrder" required />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="isActive" HelpText="Enter IsActive" ResourceKey="IsActive">Is Active: </Label>
            <div class="col-sm-9">

                <input id="isActive" type="checkbox" @bind="@_isActive" />
            </div>
        </div>

    </div>
    <button type="button" class="btn btn-success" @onclick="Save">@Localizer["Save"]</button>
    <NavLink class="btn btn-secondary" href="@ReturnUrl()">@Localizer["Cancel"]</NavLink>
    <br /><br />
    @if (PageState.Action == "Edit")
    {
        <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    }
</form>

@code {

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Restaurant Menus";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    private ElementReference form;
    private bool validated = false;

    private int _id;
    private string _name;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;
    private string _description;
    private string _imageURL;
    private string _hoursServed;
    private string _sortOrder;
    private bool _isActive;
    // Removed local NavigateUrl() method to use the one from ModuleBase

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                RestaurantMenu RestaurantMenu = await RestaurantMenuService.GetRestaurantMenuAsync(_id, ModuleState.ModuleId);
                if (RestaurantMenu != null)
                {
                    _name = RestaurantMenu.Name;
                    _description = RestaurantMenu.Description;
                    _imageURL = RestaurantMenu.ImageURL;
                    _hoursServed = RestaurantMenu.HoursServed;
                    _sortOrder = RestaurantMenu.SortOrder.ToString();
                    _isActive = RestaurantMenu.IsActive;
                    _createdby = RestaurantMenu.CreatedBy;
                    _createdon = RestaurantMenu.CreatedOn;
                    _modifiedby = RestaurantMenu.ModifiedBy;
                    _modifiedon = RestaurantMenu.ModifiedOn;
                }
            }
            else
            {
                _isActive = true; // Default value for new menu
                //_sortOrder = "0"; // Default sort order for new menu
                var maxSortOrder = await RestaurantMenuService.GetMaxSortOrderForMenuAsync(ModuleState.ModuleId);
                _sortOrder = (maxSortOrder + 10).ToString();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading RestaurantMenu {RestaurantMenuId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            validated = true;
            var interop = new Oqtane.UI.Interop(JSRuntime);
            if (await interop.FormValid(form))
            {
                if (PageState.Action == "Add")
                {
                    RestaurantMenu RestaurantMenu = new RestaurantMenu();
                    RestaurantMenu.ModuleId = ModuleState.ModuleId;
                    RestaurantMenu.Name = _name;
                    RestaurantMenu.Description = _description;
                    RestaurantMenu.ImageURL = _imageURL;
                    RestaurantMenu.HoursServed = _hoursServed;
                    RestaurantMenu.SortOrder = Int32.Parse(_sortOrder);
                    RestaurantMenu.IsActive = _isActive;

                    RestaurantMenu = await RestaurantMenuService.AddRestaurantMenuAsync(RestaurantMenu);
                    await logger.LogInformation("RestaurantMenu Added {RestaurantMenu}", RestaurantMenu);
                }
                else
                {
                    RestaurantMenu RestaurantMenu = await RestaurantMenuService.GetRestaurantMenuAsync(_id, ModuleState.ModuleId);
                    RestaurantMenu.Name = _name;
                    RestaurantMenu.Description = _description;
                    RestaurantMenu.ImageURL = _imageURL;
                    RestaurantMenu.HoursServed = _hoursServed;
                    RestaurantMenu.SortOrder = Int32.Parse(_sortOrder);
                    RestaurantMenu.IsActive = _isActive;
                    await RestaurantMenuService.UpdateRestaurantMenuAsync(RestaurantMenu);
                    await logger.LogInformation("RestaurantMenu Updated {RestaurantMenu}", RestaurantMenu);
                }
                // This will now call ModuleBase.NavigateUrl("Menus")
               //NavigationManager.NavigateTo(NavigateUrl(ActionLink("Menus"));

               // NavigateUrl(ActionLink("Menus");
                NavigationManager.NavigateTo(ReturnUrl());



            }
            else
            {
                AddModuleMessage(Localizer["Message.SaveValidation"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving RestaurantMenu {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.SaveError"], MessageType.Error);
        }
    }

    private string ReturnUrl()
    {
        return (!string.IsNullOrEmpty(NavigateUrl() + "/*/" + ModuleState.ModuleId + "/Menus")) ? NavigateUrl() + "/*/" + ModuleState.ModuleId + "/Menus" : NavigateUrl();
    }
}