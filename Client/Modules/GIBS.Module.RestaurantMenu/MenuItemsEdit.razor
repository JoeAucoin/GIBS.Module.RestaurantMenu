@using GIBS.Module.RestaurantMenu.Models
@using GIBS.Module.RestaurantMenu.Services
@using Microsoft.AspNetCore.Components.Forms
@using Oqtane.Modules.Controls
@using Oqtane.UI
@using System.Linq

@namespace GIBS.Module.RestaurantMenu
@inherits ModuleBase
@inject IMenuItemService MenuItemService
@inject IMenuCategoryService MenuCategoryService
@inject IRestaurantMenuService RestaurantMenuService
@inject NavigationManager NavigationManager
@inject IMenuAttributeService MenuAttributeService
@inject IMenuOptionService MenuOptionService
@inject IStringLocalizer<MenuItemsEdit> Localizer

@if (_menuItem != null)
{
    <EditForm Model="_menuItem" OnValidSubmit="SaveMenuItem" class="@(_validated ? "was-validated" : "needs-validation")" novalidate>
        <div class="container">
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="restaurantMenuId" HelpText="Select the menu for this item." ResourceKey="Label.Menu" />
                <div class="col-sm-9">
                    <select id="restaurantMenuId" class="form-control" @bind="RestaurantMenuId" required>
                        <option value="0">@Localizer["Select.Menu"]</option>
                        @foreach (var menu in _restaurantMenus)
                        {
                            <option value="@menu.RestaurantMenuId">@menu.Name</option>
                        }
                    </select>
                    <div class="invalid-feedback">@Localizer["Validation.Menu.Required"]</div>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="categoryId" HelpText="Select the category for this item." ResourceKey="Label.Category" />
                <div class="col-sm-9">
                    <select id="categoryId" class="form-control" @bind="_menuItem.CategoryId" required>
                        <option value="0">@Localizer["Select.Category"]</option>
                        @foreach (var category in _filteredCategories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                    <div class="invalid-feedback">@Localizer["Validation.Category.Required"]</div>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="itemName" HelpText="Enter the name of the item." ResourceKey="Label.ItemName" />
                <div class="col-sm-9">
                    <input id="itemName" class="form-control" @bind="_menuItem.ItemName" required />
                    <div class="invalid-feedback">@Localizer["Validation.ItemName.Required"]</div>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="itemDescription" HelpText="Enter a description for the item." ResourceKey="Label.ItemDescription" />
                <div class="col-sm-9">
                    <textarea id="itemDescription" class="form-control" @bind="_menuItem.ItemDescription"></textarea>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="itemPrice" HelpText="Enter the price of the item." ResourceKey="Label.ItemPrice" />
                <div class="col-sm-9">
                    <input id="itemPrice" type="number" step=".01" class="form-control" @bind="_menuItem.ItemPrice" required />
                    <div class="invalid-feedback">@Localizer["Validation.ItemPrice.Required"]</div>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="priceNote" HelpText="Enter the price note of the item." ResourceKey="Label.PriceNote" />
                <div class="col-sm-9">
                    <input id="priceNote" class="form-control" @bind="_menuItem.PriceNote" />
                </div>
            </div>


            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="itemImageURL" ResourceKey="Label.ItemImageURL" />
                <div class="col-sm-9">
                    <input id="itemImageURL" class="form-control" @bind="_menuItem.ItemImageURL" />
                </div>
            </div>

            <div class="row mb-1 mt-3 align-items-center">
                <Label Class="col-sm-3" For="sortOrder" HelpText="Enter the display order for this item." ResourceKey="Label.SortOrder" />
                <div class="col-sm-9">
                    <input id="sortOrder" type="number" class="form-control" @bind="_menuItem.SortOrder" required />
                    <div class="invalid-feedback">@Localizer["Validation.SortOrder.Required"]</div>
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="isNewItem" HelpText="Check if this item is new." ResourceKey="Label.IsNewItem" />
                <div class="col-sm-9">
                    <input id="IsNewItem" type="checkbox" class="form-check-input" @bind="_menuItem.IsNewItem" />
                </div>
            </div>

            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="isActive" HelpText="Check if this item is currently active." ResourceKey="Label.IsActive" />
                <div class="col-sm-9">
                    <input id="isActive" type="checkbox" class="form-check-input" @bind="_menuItem.IsActive" />
                </div>
            </div>

            <div class="row my-3">
                <div class="col">
                    <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#nutritionInfo" aria-expanded="false" aria-controls="nutritionInfo">
                        @Localizer["Button.NutritionInfo"]
                    </button>
                </div>
            </div>

            <div class="collapse" id="nutritionInfo">
                <div class="card card-body bg-light">
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="calories" HelpText="Enter the number of calories." ResourceKey="Label.Calories" />
                        <div class="col-sm-9">
                            <input id="calories" type="number" step="any" class="form-control" @bind="_menuItem.Calories" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="protein" HelpText="Enter grams of protein." ResourceKey="Label.Protein" />
                        <div class="col-sm-9">
                            <input id="protein" type="number" step="any" class="form-control" @bind="_menuItem.Protein" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="fat" HelpText="Enter grams of fat." ResourceKey="Label.Fat" />
                        <div class="col-sm-9">
                            <input id="fat" type="number" step="any" class="form-control" @bind="_menuItem.Fat" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="carbohydrates" HelpText="Enter grams of carbohydrates." ResourceKey="Label.Carbohydrates" />
                        <div class="col-sm-9">
                            <input id="carbohydrates" type="number" step="any" class="form-control" @bind="_menuItem.Carbohydrates" />
                        </div>
                    </div>
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="sodium" HelpText="Enter milligrams of sodium." ResourceKey="Label.Sodium" />
                        <div class="col-sm-9">
                            <input id="sodium" type="number" step="any" class="form-control" @bind="_menuItem.Sodium" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row my-3">
                <div class="col">
                    <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#attributeSection" aria-expanded="false" aria-controls="attributeSection">
                        @Localizer["Button.Attributes"]
                    </button>
                </div>
            </div>
            <div class="collapse" id="attributeSection">
                <div class="card card-body bg-light">
                    <div class="row mb-1">
                        <div class="col-sm-3">
                            <strong>@Localizer["Label.Attributes"]</strong>
                        </div>
                        <div class="col-sm-9">
                            @foreach (var attr in _attributes)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="attr_@attr.AttributeId"
                                           value="@attr.AttributeId"
                                           @onchange="e => OnAttributeChecked(attr.AttributeId, e.Value is bool b && b)" 
                                           checked="@_selectedAttributeIds.Contains(attr.AttributeId)" />
                                    <label class="form-check-label" for="attr_@attr.AttributeId">@attr.AttributeName</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="row my-3">
                <div class="col">
                    <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#menuOptionsSection" aria-expanded="false" aria-controls="menuOptionsSection"
                        disabled="@(IsMenuOptionsEnabled ? null : true)">
                        @Localizer["Button.MenuOptions"]
                    </button>
                </div>
            </div>
            <div class="collapse @(IsMenuOptionsEnabled ? "" : "disabled-section")" id="menuOptionsSection">
                <div class="card card-body bg-light" style="@(IsMenuOptionsEnabled ? "" : "pointer-events:none;opacity:0.5;")">
                    @if (!IsMenuOptionsEnabled)
                    {
                        <div class="alert alert-warning mb-2">
                            @Localizer["Please save the menu item before adding options."]
                        </div>
                    }
                    @if (_menuOptions == null)
                    {
                        <div><em>@Localizer["Loading"]</em></div>
                    }
                    else if (_menuOptions.Count == 0)
                    {
                        <div><em>@Localizer["NoMenuOptions"]</em></div>
                    }
                    else
                    {
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>@Localizer["Label.OptionName"]</th>
                                    <th>@Localizer["Label.OptionPrice"]</th>
                                    <th>@Localizer["Label.OptionIsActive"]</th>
                                    <th>@Localizer["Label.OptionActions"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var option in _menuOptions)
                                {
                                    <tr>

                                            <td>@option.OptionName</td>
                                            <td>@FormatCurrency(option.OptionPrice)</td>
                                        
                                            <td>
                                                <input type="checkbox" disabled checked="@option.IsActive" />
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary" type="button" @onclick="() => EditOption(option)">Edit</button>
                                                <button class="btn btn-sm btn-danger" type="button" @onclick="() => DeleteOption(option.OptionId)">Delete</button>
                                            </td>
                                        
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    <hr />
                    <h6>@Localizer["Label.AddMenuOption"]</h6>

                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row">
                                <div class="mb-2 col-md-6">
                                    <label>@Localizer["Label.OptionName"]</label>
                                    <input class="form-control" @bind="_newMenuOption.OptionName" />
                                </div>
                                <div class="mb-2 col-md-6">
                                    <label>@Localizer["Label.OptionPrice"]</label>
                                    <input class="form-control" type="number" step="0.01" @bind="_newMenuOption.OptionPrice" />
                                </div>
                            </div>
                            <div class="mb-2">
                                <label>@Localizer["Label.OptionImage"]</label>
                                <input class="form-control" @bind="_newMenuOption.OptionImage" />
                            </div>
                            <div class="mb-2">
                                <input type="checkbox" class="form-check-input" @bind="_newMenuOption.IsActive" />
                                <label class="form-check-label ms-2">@Localizer["OptionLabel.IsActive"]</label>
                            </div>
                            <div class="mb-2">
                                <button class="btn btn-info" type="button" data-bs-toggle="collapse" data-bs-target="#optionNutrition" aria-expanded="false" aria-controls="optionNutrition">
                                    @Localizer["Button.OptionNutritionInfo"]
                                </button>
                            </div>
                            <div class="collapse" id="optionNutrition">
                                <div class="card card-body bg-light">
                                    <div class="row">
                                        <div class="mb-2 col-md-2">
                                        <label>@Localizer["Label.Calories"]</label>
                                        <input class="form-control" type="number" @bind="_newMenuOption.MOCalories" />
                                    </div>
                                        <div class="mb-2 col-md-2">
                                        <label>@Localizer["Label.Protein"]</label>
                                        <input class="form-control" type="number" step="any" @bind="_newMenuOption.MOProtein" />
                                    </div>
                                        <div class="mb-2 col-md-2">
                                        <label>@Localizer["Label.Fat"]</label>
                                        <input class="form-control" type="number" step="any" @bind="_newMenuOption.MOFat" />
                                    </div>
                                        <div class="mb-2 col-md-2">
                                        <label>@Localizer["Label.Carbohydrates"]</label>
                                        <input class="form-control" type="number" step="any" @bind="_newMenuOption.MOCarbohydrates" />
                                    </div>
                                        <div class="mb-2 col-md-2">
                                        <label>@Localizer["Label.Sodium"]</label>
                                        <input class="form-control" type="number" step="any" @bind="_newMenuOption.MOSodium" />
                                    </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                @if (_isEditingOption)
                                {
                                    <button class="btn btn-success" type="button" @onclick="SaveOrUpdateMenuOption">@Localizer["OptionButton.Update"]</button>
                                    <button class="btn btn-secondary" type="button" @onclick="CancelEditOption">@Localizer["Button.Cancel"]</button>
                                }
                                else
                                {
                                    <button class="btn btn-success" type="button" @onclick="SaveOrUpdateMenuOption">@Localizer["OptionButton.Add"]</button>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(_menuOptionMessage))
                            {
                                <div class="alert alert-info mt-2">@_menuOptionMessage</div>
                            }
                        </div>
                    </div>


                </div>
            </div>

        </div>
        <br />
        <button type="submit" class="btn btn-success">@Localizer["Button.Save"]</button>
        <NavLink class="btn btn-secondary" href="@ReturnUrl()">@Localizer["Button.Cancel"]</NavLink>

        @if (_isEditMode)
        {
            <hr />
            <AuditInfo CreatedBy="@_menuItem.CreatedBy" CreatedOn="@_menuItem.CreatedOn" ModifiedBy="@_menuItem.ModifiedBy" ModifiedOn="@_menuItem.ModifiedOn"></AuditInfo>
        }
    </EditForm>
}
else
{
    <p><em>@Localizer["Loading"]</em></p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private MenuItem _menuItem;
    private List<RestaurantMenu> _restaurantMenus = new();
    private List<MenuCategory> _allCategories = new();
    private List<MenuCategory> _filteredCategories = new();
    private List<MenuAttribute> _attributes = new();
    private List<int> _selectedAttributeIds = new();
    private bool _validated = false;
    private bool _isEditMode = false;
    private string CurrentUserName;

    private List<MenuOption> _menuOptions;
    private MenuOption _newMenuOption = new();
    private string _menuOptionMessage;
    private int? _editOptionId = null;
    private MenuOption _editOption = new();

    private bool _isEditingOption = false;
    private int? _editingOptionId = null;

    // Step 1: Add property to control menu options section enabled state
    private bool IsMenuOptionsEnabled = false;

    // Property for option 1: handle RestaurantMenuId changes
    private int RestaurantMenuId
    {
        get => _menuItem.RestaurantMenuId;
        set
        {
            if (_menuItem.RestaurantMenuId != value)
            {
                _menuItem.RestaurantMenuId = value;
                FilterCategories(value);
                _menuItem.CategoryId = 0; // Reset category selection
            }
        }
    }

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Title
    {
        get
        {
            if (Localizer != null)
            {
                return _isEditMode ? Localizer["PageTitle.Edit"] : Localizer["PageTitle.Add"];
            }
            return "Edit Menu Item";
        }
    }

    private void EditOption(MenuOption option)
    {
        _isEditingOption = true;
        _editingOptionId = option.OptionId;
        _newMenuOption = new MenuOption
        {
            OptionId = option.OptionId,
            OptionName = option.OptionName,
            OptionPrice = option.OptionPrice,
            OptionImage = option.OptionImage,
            MOCalories = option.MOCalories,
            MOProtein = option.MOProtein,
            MOFat = option.MOFat,
            MOCarbohydrates = option.MOCarbohydrates,
            MOSodium = option.MOSodium,
            IsActive = option.IsActive,
            ItemId = option.ItemId
        };
    }

    private void CancelEditOption()
    {
        _isEditingOption = false;
        _editingOptionId = null;
        _newMenuOption = new MenuOption();
    }

    private async Task SaveEditOption(int optionId)
    {
        // Call your service to update the option
        await MenuOptionService.UpdateMenuOptionAsync(_editOption);
        _editOptionId = null;
        await LoadMenuOptions();
    }

    private async Task DeleteOption(int optionId)
    {
        // Optionally confirm with the user
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Delete this option?"))
        {
            await MenuOptionService.DeleteMenuOptionAsync(optionId);
            await LoadMenuOptions();
        }
    }

    private async Task SaveOrUpdateMenuOption()
    {
        if (string.IsNullOrWhiteSpace(_newMenuOption.OptionName))
        {
            _menuOptionMessage = Localizer["Validation.OptionName.Required"];
            return;
        }
        _newMenuOption.ItemId = _menuItem.ItemId;
     //   _newMenuOption.IsActive = true;

        if (_isEditingOption && _editingOptionId.HasValue)
        {
            await MenuOptionService.UpdateMenuOptionAsync(_newMenuOption);
            _menuOptionMessage = Localizer["Updating.MenuOption.Update"];
        }
        else
        {
            var added = await MenuOptionService.AddMenuOptionAsync(_newMenuOption);
            if (added != null && added.OptionId > 0)
            {
                _menuOptionMessage = Localizer["Success.MenuOption.Add"];
            }
            else
            {
                _menuOptionMessage = Localizer["Error.MenuOption.Add"];
                return;
            }
        }

        _newMenuOption = new MenuOption();
        _isEditingOption = false;
        _editingOptionId = null;
        await LoadMenuOptions();
    }

    private string FormatCurrency(decimal? price)
    {
        if (price == null)
            return string.Empty;

        try
        {
            var cultureInfo = new System.Globalization.CultureInfo("en-US"); // Example: US Dollar
            return price.Value.ToString("C", cultureInfo);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Could not format currency using CurrentUICulture.");
            return price.Value.ToString("C");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            CurrentUserName = user.Identity.Name;
        }
        else
        {
            CurrentUserName = "Anonymous";
        }
        try
        {
            _restaurantMenus = (await RestaurantMenuService.GetRestaurantMenusAsync(ModuleState.ModuleId)).ToList();
            _allCategories = (await MenuCategoryService.GetMenuCategoriesAsync(ModuleState.ModuleId)).ToList();

            if (PageState.QueryString.ContainsKey("id") && int.TryParse(PageState.QueryString["id"], out var menuItemId))
            {
                _isEditMode = true;
                _menuItem = await MenuItemService.GetMenuItemAsync(menuItemId, ModuleState.ModuleId);
                if (_menuItem != null)
                {
                    FilterCategories(_menuItem.RestaurantMenuId);
                }
                // Step 3: Enable menu options if editing
                IsMenuOptionsEnabled = true;
            }
            else
            {
                _menuItem = new MenuItem
                {
                    ModuleId = ModuleState.ModuleId,
                    IsActive = true
                };
                // Step 3: Disable menu options if adding new
                IsMenuOptionsEnabled = false;
            }

            _attributes = (await MenuAttributeService.GetMenuAttributesAsync(ModuleState.ModuleId)).ToList();

            if (_isEditMode && _menuItem != null)
            {
                var itemAttributes = await MenuItemService.GetMenuItemAttributesAsync(_menuItem.ItemId, ModuleState.ModuleId);
                _selectedAttributeIds = itemAttributes.Select(a => a.AttributeId).ToList();

                await LoadMenuOptions();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Menu Item {{Error}}", ex.Message);
            AddModuleMessage(Localizer["Error.Load"], MessageType.Error);
        }
    }

    private async Task LoadMenuOptions()
    {
        if (_menuItem?.ItemId > 0)
        {
            _menuOptions = await MenuOptionService.GetMenuOptionsByItemIdAsync(_menuItem.ItemId);
        }
        else
        {
            _menuOptions = new List<MenuOption>();
        }
        StateHasChanged();
    }

    private void OnAttributeChecked(int attributeId, bool isChecked)
    {
        if (isChecked)
        {
            if (!_selectedAttributeIds.Contains(attributeId))
                _selectedAttributeIds.Add(attributeId);
        }
        else
        {
            _selectedAttributeIds.Remove(attributeId);
        }
    }

    private void FilterCategories(int menuId)
    {
        _filteredCategories = _allCategories.Where(c => c.RestaurantMenuId == menuId).ToList();
    }

    private async Task SaveMenuItem()
    {
        _validated = true;

        try
        {
            if (_isEditMode)
            {
                _menuItem.ModifiedBy = CurrentUserName;
                await MenuItemService.UpdateMenuItemAsync(_menuItem);
                AddModuleMessage(Localizer["Success.Update"], MessageType.Success);
            }
            else
            {
                _menuItem.CreatedBy = CurrentUserName;
                await MenuItemService.AddMenuItemAsync(_menuItem);
                AddModuleMessage(Localizer["Success.Add"], MessageType.Success);

                // Step 4: Enable menu options after saving new item
                IsMenuOptionsEnabled = true;
                await LoadMenuOptions();
                _isEditMode = true;
                StateHasChanged();
                return; // Prevent navigation so user can add options
            }

            await MenuItemService.UpdateMenuItemAttributesAsync(_menuItem.ItemId, ModuleState.ModuleId, _selectedAttributeIds);

            NavigationManager.NavigateTo(ReturnUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Menu Item {{Error}}", ex.Message);
            AddModuleMessage(Localizer["Error.Save"], MessageType.Error);
        }
    }

    private string ReturnUrl()
    {
        if (ModuleState != null)
        {
            return (!string.IsNullOrEmpty(NavigateUrl() + "/*/" + ModuleState.ModuleId + "/MenuItems")) ? NavigateUrl() + "/*/" + ModuleState.ModuleId + "/MenuItems" : NavigateUrl();
        }
        return NavigateUrl();
    }
}